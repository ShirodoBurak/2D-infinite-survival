using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class world_generator : MonoBehaviour
{
    [System.Serializable]
    public class noise_settings
    {
        public bool Ingore;
        [Space(10)]
        [Header("Settings")]
        public int Seed;
        public enum noise_type { Surface, Caves }
        public noise_type noiseType;
        public int octaves = 1;
        public float amplitude = 256;
        public float persistence = 1;
        public float frequency = 0.023f;
    }
    public noise_settings[] _settings;
    public float size = 1;
    public float multiplier = 1;
    public Vector2Int offset;
    void Update(){
        generateImage();
    }
    void generateImage(){   
        if (_settings.Length > 0){
            Texture2D perlin_image = new Texture2D(256, 256);
            for (int x = 0; x < 256; x++){
                for (int y = 0; y < 256; y++){
                    float noise2d = 0;
                    for (int k = 0; k<_settings.Length;k++){
                        var settings = _settings[k];
                        noise2d += Mathf.PerlinNoise((offset.x + .5f + x + settings.Seed) * size,(offset.y + .5f + y + settings.Seed) * size)/_settings.Length;
                    }
                    perlin_image.SetPixel(x, y, new Color(noise2d,noise2d,noise2d));
                } 
            }
            int randomnumber = Random.Range(0, 256);
            Debug.Log(randomnumber + "\n" + Mathf.PerlinNoise(randomnumber, randomnumber));
            perlin_image.filterMode = FilterMode.Point;
            perlin_image.Apply();
            Rect rec = new Rect(0, 0, perlin_image.width, perlin_image.height);
            Sprite resultImage = Sprite.Create(perlin_image, rec, new Vector2(0.5f, 0.5f), 100f); 
            this.gameObject.GetComponent<SpriteRenderer>().sprite = resultImage;
        }
    }
}

